{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAGaA,EAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACzB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHXC,G,MAAW,SAAAR,GAEpB,OAAQ,sBAAKC,UAAU,YAAf,cACJD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,EAAhC,eAAWA,EAAQC,OAD9C,SCHCM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACtB,8BAEC,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAWF,QCkClEG,E,kDAlCb,aAAgB,IAAD,8BACb,gBAeDH,aAAe,SAAAI,GAAO,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAd1D,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAJF,E,qDAQf,WAAqB,IAAD,OAEhBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAK5C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEjG,OACI,sBAAK9B,UAAY,MAAjB,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,oBAAqBC,aAAgBe,KAAKf,eAEjE,cAAC,EAAD,CAAUJ,SAAYoB,W,GA5BlBI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.26a68e09.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n      <img alt=\"monsterImg\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>  \r\n    </div>\r\n    \r\n)","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => {\r\n\r\n    return (<div className=\"card-list\"> {\r\n        props.monsters.map(monster =>( <Card key={monster.id} monster={monster}>  </Card>))\r\n      } </div>)\r\n}\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n   <div>\r\n    \r\n    <input className='search' type='search' placeholder={placeholder} onChange={ handleChange } />\r\n   \r\n   </div>\r\n)","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n    \n  constructor () {\n    super()\n    this.state ={ \n      monsters: [],\n      searchField: ''\n    }\n  }\n  \n  componentDidMount() {\n    \n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n     \n  }\n\n   handleChange = e => { this.setState({searchField: e.target.value}) } \n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n        return (\n            <div className = 'App'>\n              <h1> Mircea Rolodex </h1>\n              <SearchBox placeholder='Search monster...'  handleChange = {this.handleChange}/>\n              \n              <CardList monsters = {filteredMonsters}>  \n               </CardList >\n             \n            </div>\n        )\n    }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}